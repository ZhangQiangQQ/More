1.同源策略：
协议相同，域名相同，端口相同

2.目的：
保护用户信息的安全，防止恶意网站窃取信息。

3.受限制的三种行为：
cookie，localStorage，IndexDB（大量数据的存储？）无法读取
DOM无法获得
Ajax 无法发送

4.Cookie：
  一级域名相同，二级域名不同的，浏览器允许通过设置 document.domain 共享cookie
  http://w1.example.com/a.html   http://w2.example.com/b.html
  通过 document.domain = 'example.com';  共享cookie

5. iframe：
通过 iframe 和 window.open 方法打开的窗口，无法与父级窗口通信（一级域名相同，二级域名不同的可以通过上述方法）
完全不同源的网站，目前是三种方法解决跨域窗口的通信问题
* 片段识别符号--fragment identifier
* window.name
* 跨文档通信API(H5)-- Cross-document messaging 

a.片段识别符号： 
  即 url中#后面的部分，通俗点讲就是 通过改变#后面的信息，并不会引起页面的刷新，然后子窗口可以监听hashchange获取 
  例：window.onhashchange = checkMessage;
      function checkMessage() {
        var message = window.location.hash;
        // ...
      }

b.window.name：
   主要操作步骤是：  主页面--- 打开一个子窗口---子窗口设置信息写入： window.name = data
                    子窗口跳回和主窗口 同域的 网址；然后主窗口便可以读取子窗口的数据了
                    var data = document.getElementById('myFrame').contentWindow.name;
   这种方法的优点是，window.name容量很大，可以放置非常长的字符串；缺点是必须监听子窗口window.name属性的变化，影响网页性能。

c.window.postMessage:
   h5的全新的API：window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源
   postMessage方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即"协议 + 域名 + 端口"。也可以设为*，表示不限制域名，向所有窗口发送。
   例：父窗口和子窗口都可以通过message事件，监听对方的消息。
   父向子发送：
   var popup = window.open('http://bbb.com', 'title');
   popup.postMessage('Hello World!', 'http://bbb.com');
   子向父发送：
   window.opener.postMessage('Nice to see you', 'http://aaa.com');
d.LocalStorage：
   即通过postMessage后 ，进行一系列的数据转换，来写入localstorage里面

6.Aajx：
  同源政策规定，AJAX请求只能发给同源的网址，否则就报错。
  架设服务器代理，请求同源服务器，然后由后者请求外部
  又或者：JSONP WebSocket CORS
  A.JSONP: Script标签，向服务器发送请求并不受 同源策略限制，数据可放在指定的回调函数里面传回来  只能get
  B.WebSocket：
    一种通信协议，不实行同源策略，服务器支持即可。使用ws：//(非加密) 和 wss：//(加密)，作为协议前缀。
    有个Origin字段： 表示请求的请求源，来自哪个域名。服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，
    请求头：
    GET /chat HTTP/1.1
    Host: server.example.com
    Upgrade: websocket
    Connection: Upgrade
    Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
    Sec-WebSocket-Protocol: chat, superchat
    Sec-WebSocket-Version: 13
    Origin: http://example.com
    回应：
    HTTP/1.1 101 Switching Protocols
    Upgrade: websocket
    Connection: Upgrade
    Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
    Sec-WebSocket-Protocol: chat
  C.CORS:
    CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。
    它是W3C标准，是跨源AJAX请求的根本解决方法。
    相比JSONP只能发GET请求，CORS允许任何类型的请求。
    
    它允许 浏览器向 跨源服务器 发出 xmlHttpRequest 请求从而克服 AJAX只能 同源使用的 限制。
    内容太多，看这个吧 ！http://www.ruanyifeng.com/blog/2016/04/cors.html
    


  
  



      

